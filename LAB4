rm(list=ls())
mdir <- getwd()

# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")

# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")

# -- Cargar y/o instalar en automatico paquetes a utilizar -- #

pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
         "gridExtra","httr","jsonlite","lmtest","lubridate","moments",
         "matrixStats", "PerformanceAnalytics","plyr","quantmod",
         "reshape2", "stats","scales","tseries",
         "TTR","TSA","XML","xts","zoo","RCurl")

inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)

# -- Cargar archivos desde GitHub -- #

RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)

# -- Parametros para usar API-OANDA

# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6" 
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "GMT"
# Instrumento
OA_In <- "USD_MXN"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000

# Esta se obtiene de cada observacion en el archivo xls que descargas. Este fue
# un ejemplo de una fecha que podrias leer de tal archivo una vez que lo descargas
#Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1 para convertir a "YYYY-MM-DD"
#F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))

# Opcion 2 para convertir a "YYYY-MM-DD"
#F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")

# Ejemplo Si el comunicado fue en domingo, que pida precios desde viernes a domingo
#F3 <- as.Date("2018-09-30")

# Condicion por si acaso toca en domingo el comunicado, no se podria restar un dia y 
# que terminara siendo sabado, porque ese dia no hay precios.


# Para convertir las fechas del xlsx con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario <- read.csv("history.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")

#Aqui va un for-------------------------------------------------------------------------

e0 <- Calendario$DateTime[1]
e1 <- as.POSIXct(e0, format = "%m/%d/%Y %H:%M:%S")
e2 <- as.character(e1)
e3 <- substr(e2,1,10)
e4 <- as.Date(e3)
e5 <- e4 + 1

if(wday(e4) != 1){
  
  Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                             DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                             Instrument = OA_In, 
                             Start = e4, End = e5, Count = NULL)
} else {
  Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
                             DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
                             Instrument = OA_In, 
                             Start = e4-2, End = e5, Count = NULL)
}

Precios_Oanda$TimeStamp <- as.character(as.POSIXct(Precios_Oanda$TimeStamp, format = "%m/%d/%Y %H:%M:%S"))

#fecha <- as.character(as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S"))

# Para encontrar el registro donde coincide la fecha y hora del comunicado de 
date = Calendario$DateTime[i]
fecha <- as.character(as.POSIXct(date, format = "%m/%d/%Y %H:%M"))
#indicador y los historicos de precios descargados

ind <- which(Precios_Oanda$TimeStamp == Calendario$DateTime[i])

# Para visualizar un data frame con los 31 precios deseados. 15 antes del comunicad, 1 
# dIPante el comunicado y 15 despuÃ©s del comunicado
df <- Precios_Oanda[(ind-15):(ind+15),]

suppressMessages(library(openxlsx))
Industrial_Production <- read.csv("history.csv")


Industrial_Production[,1] <- as.POSIXct(as.character(Industrial_Production[,1]),
                                        format = "%m/%d/%Y %H:%M",
                                        origin = "America/Guadalajara")

IP <- data.frame("Date"= Industrial_Production[,1],
                 "Actual"= Industrial_Production[,2],
                 "Consensus"= Industrial_Production[,3],
                 "Previous"= Industrial_Production[,4],
                 "Clasificacion" = 0)

#Clasificacion de observaciones
for(i in 1:length(IP$Date)){
  
  if(IP$Actual[i]>=IP$Consensus[i] & IP$Consensus[i]>=IP$Previous[i])
  {IP$Clasificacion[i] <-"A"}
  
  if(IP$Actual[i]>=IP$Consensus[i] & IP$Consensus[i]<IP$Previous[i])
  {IP$Clasificacion[i] <-"B"}
  
  if(IP$Actual[i]<IP$Consensus[i] & IP$Consensus[i]>=IP$Previous[i])
  {IP$Clasificacion[i] <-"C"}
  
  if(IP$Actual[i]<IP$Consensus[i] & IP$Consensus[i]<IP$Previous[i])
  {IP$Clasificacion[i] <-"D"}
  
}

df <- Precios_Oanda[(ind-15):(ind+15),]
window_prices[[i]]<-df
metrics$Metric.1[[i]]<-sd(diff(log(window_prices[[i]]$Close))*MultPip_MT1)
metrics$Metric.2[[i]]<-window_prices[[i]]$Close[[15]]-window_prices[[i]]$Close[[31]]
metrics$Metric.3[[i]]<-(min(window_prices[[i]]$Low)-max(window_prices[[i]]$High))*MultPip_MT1


data=data.frame(append(data,metrics))

results=data.frame("case"=sort(unique(data$Class)),"resultP"=0,"resultN"=0)
results$resultP[[4]]<-count(data$Class==4&data$Metric.2>0)[[2]][2]/count(data$Class==4)[[2]][2]
results$resultP[[3]]<-count(data$Class==3&data$Metric.2>0)[[2]][2]/count(data$Class==3)[[2]][2]
results$resultP[[2]]<-count(data$Class==2&data$Metric.2>0)[[2]][2]/count(data$Class==2)[[2]][2]
results$resultP[[1]]<-count(data$Class==1&data$Metric.2>0)[[2]][2]/count(data$Class==1)[[2]][2]
results$resultN= 1-results$resultP
